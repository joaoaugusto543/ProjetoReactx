{"ast":null,"code":"const INVALID_CPF = ['00000000000', '11111111111', '22222222222', '33333333333', '44444444444', '55555555555', '66666666666', '77777777777', '88888888888', '99999999999'];\nconst INVALID_RG = ['000000000', '111111111', '222222222', '333333333', '444444444', '555555555', '666666666', '777777777', '888888888', '999999999'];\n\n/**\n * Validates a CPF number\n * https://www.geradorcpf.com/algoritmo_do_cpf.htm\n *\n * @param {String} cpf\n * @returns {Boolean}\n */\nconst cpf = cpf => {\n  const numeric = String(cpf).replace(/[^\\d]+/g, '');\n  if (!numeric || numeric.length !== 11 || INVALID_CPF.includes(numeric)) {\n    return false;\n  }\n\n  // first validator digit\n  let sum = 0;\n  for (let i = 0; i < 9; i += 1) {\n    sum += parseInt(numeric[i], 10) * (10 - i);\n  }\n  let remainder = sum % 11;\n  let digit = remainder < 2 ? 0 : 11 - remainder;\n  if (digit !== parseInt(numeric[9], 10)) {\n    return false;\n  }\n\n  // second validator digit\n  sum = 0;\n  for (let i = 0; i < 10; i += 1) {\n    sum += parseInt(numeric[i], 10) * (11 - i);\n  }\n  remainder = sum % 11;\n  digit = remainder < 2 ? 0 : 11 - remainder;\n  if (digit !== parseInt(numeric[10], 10)) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Validates a RG number\n *\n * @param {String} rg\n * @returns {Boolean}\n */\nconst rg = rg => {\n  const numeric = String(rg).replace(/[^\\d]+/g, '');\n  if (!numeric || numeric.length !== 9 || INVALID_RG.includes(numeric)) {\n    return false;\n  }\n  let sum = parseInt(numeric[8], 10) * 100;\n  for (let i = 0; i < 8; i += 1) {\n    sum += parseInt(numeric[i], 10) * (2 + i);\n  }\n  return sum % 11 === 0;\n};\nmodule.exports = {\n  cpf,\n  rg\n};","map":{"version":3,"names":["INVALID_CPF","INVALID_RG","cpf","numeric","String","replace","length","includes","sum","i","parseInt","remainder","digit","rg","module","exports"],"sources":["C:/Users/Core i3/OneDrive/Documentos/projetoReactx/reactx/node_modules/cpf-rg-validator/index.js"],"sourcesContent":["const INVALID_CPF = [\n  '00000000000',\n  '11111111111',\n  '22222222222',\n  '33333333333',\n  '44444444444',\n  '55555555555',\n  '66666666666',\n  '77777777777',\n  '88888888888',\n  '99999999999',\n];\n\nconst INVALID_RG = [\n  '000000000',\n  '111111111',\n  '222222222',\n  '333333333',\n  '444444444',\n  '555555555',\n  '666666666',\n  '777777777',\n  '888888888',\n  '999999999',\n];\n\n/**\n * Validates a CPF number\n * https://www.geradorcpf.com/algoritmo_do_cpf.htm\n *\n * @param {String} cpf\n * @returns {Boolean}\n */\nconst cpf = (cpf) => {\n  const numeric = String(cpf).replace(/[^\\d]+/g,'');\n\n  if (!numeric || numeric.length !== 11 || INVALID_CPF.includes(numeric)) {\n    return false;\n  }\n\n  // first validator digit\n  let sum = 0;\n  for (let i = 0; i < 9; i += 1) {\n    sum += parseInt(numeric[i], 10) * (10 - i);\n  }\n\n  let remainder = sum % 11;\n  let digit = remainder < 2 ? 0 : 11 - remainder;\n\n  if (digit !== parseInt(numeric[9], 10)) {\n    return false;\n  }\n\n  // second validator digit\n  sum = 0;\n  for (let i = 0; i < 10; i += 1) {\n    sum += parseInt(numeric[i], 10) * (11 - i);\n  }\n\n  remainder = sum % 11;\n  digit = remainder < 2 ? 0 : 11 - remainder;\n\n  if (digit !== parseInt(numeric[10], 10)) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Validates a RG number\n *\n * @param {String} rg\n * @returns {Boolean}\n */\nconst rg = (rg) => {\n  const numeric = String(rg).replace(/[^\\d]+/g,'');\n\n  if (!numeric || numeric.length !== 9 || INVALID_RG.includes(numeric)) {\n    return false;\n  }\n\n  let sum = parseInt(numeric[8], 10) * 100;\n\n  for (let i = 0; i < 8; i += 1) {\n    sum += parseInt(numeric[i], 10) * (2 + i);\n  }\n\n  return sum % 11 === 0;\n};\n\nmodule.exports = {\n  cpf, rg,\n};\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAClB,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,EACb,aAAa,CACd;AAED,MAAMC,UAAU,GAAG,CACjB,WAAW,EACX,WAAW,EACX,WAAW,EACX,WAAW,EACX,WAAW,EACX,WAAW,EACX,WAAW,EACX,WAAW,EACX,WAAW,EACX,WAAW,CACZ;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAIA,GAAG,IAAK;EACnB,MAAMC,OAAO,GAAGC,MAAM,CAACF,GAAG,CAAC,CAACG,OAAO,CAAC,SAAS,EAAC,EAAE,CAAC;EAEjD,IAAI,CAACF,OAAO,IAAIA,OAAO,CAACG,MAAM,KAAK,EAAE,IAAIN,WAAW,CAACO,QAAQ,CAACJ,OAAO,CAAC,EAAE;IACtE,OAAO,KAAK;EACd;;EAEA;EACA,IAAIK,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC7BD,GAAG,IAAIE,QAAQ,CAACP,OAAO,CAACM,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EAC5C;EAEA,IAAIE,SAAS,GAAGH,GAAG,GAAG,EAAE;EACxB,IAAII,KAAK,GAAGD,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAGA,SAAS;EAE9C,IAAIC,KAAK,KAAKF,QAAQ,CAACP,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;IACtC,OAAO,KAAK;EACd;;EAEA;EACAK,GAAG,GAAG,CAAC;EACP,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC9BD,GAAG,IAAIE,QAAQ,CAACP,OAAO,CAACM,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EAC5C;EAEAE,SAAS,GAAGH,GAAG,GAAG,EAAE;EACpBI,KAAK,GAAGD,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAGA,SAAS;EAE1C,IAAIC,KAAK,KAAKF,QAAQ,CAACP,OAAO,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE;IACvC,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMU,EAAE,GAAIA,EAAE,IAAK;EACjB,MAAMV,OAAO,GAAGC,MAAM,CAACS,EAAE,CAAC,CAACR,OAAO,CAAC,SAAS,EAAC,EAAE,CAAC;EAEhD,IAAI,CAACF,OAAO,IAAIA,OAAO,CAACG,MAAM,KAAK,CAAC,IAAIL,UAAU,CAACM,QAAQ,CAACJ,OAAO,CAAC,EAAE;IACpE,OAAO,KAAK;EACd;EAEA,IAAIK,GAAG,GAAGE,QAAQ,CAACP,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG;EAExC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC7BD,GAAG,IAAIE,QAAQ,CAACP,OAAO,CAACM,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC;EAC3C;EAEA,OAAOD,GAAG,GAAG,EAAE,KAAK,CAAC;AACvB,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG;EACfb,GAAG;EAAEW;AACP,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}